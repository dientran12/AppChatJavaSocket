/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author HP
 */
public class Client extends javax.swing.JFrame {

    private Thread thread;
    private BufferedWriter output;
    private BufferedReader input;
    private Socket skOfClient;
    private int id;
    private List<String> onlineList;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);

        jtextarea_list_messages.setEditable(false);
        jtextarea_list_useronline.setEditable(false);
        setUpSocket();
        id = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lable_dsonline = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtextarea_list_useronline = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtextarea_list_messages = new javax.swing.JTextArea();
        jtextfiel_message = new javax.swing.JTextField();
        jcombobox_received = new javax.swing.JComboBox<>();
        btn_give = new javax.swing.JButton();
        jlabel_sendTo = new javax.swing.JLabel();
        this.setResizable(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lable_dsonline.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lable_dsonline.setText("Ds online");

        jtextarea_list_useronline.setColumns(20);
        jtextarea_list_useronline.setRows(5);
        jtextarea_list_useronline.setAutoscrolls(false);
        jScrollPane1.setViewportView(jtextarea_list_useronline);

        jtextarea_list_messages.setColumns(20);
        jtextarea_list_messages.setRows(5);
        jScrollPane2.setViewportView(jtextarea_list_messages);

        jtextfiel_message.setToolTipText("nhap tin nhan");

        jcombobox_received.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gửi cho tất cả", "Client 1", "Client 2", "Client 3", "Client 4" }));
        jcombobox_received.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcombobox_receivedActionPerformed(evt);
            }
        });

        btn_give.setText("Send");
        btn_give.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_giveActionPerformed(evt);
            }
        });

        jlabel_sendTo.setText("Tin sẽ được gửi đến mọi người");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(317)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(btn_give, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
        						.addComponent(jcombobox_received, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        					.addGap(14))
        				.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        					.addGroup(layout.createSequentialGroup()
        						.addComponent(lable_dsonline, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
        						.addPreferredGap(ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
        						.addComponent(jlabel_sendTo, GroupLayout.PREFERRED_SIZE, 289, GroupLayout.PREFERRED_SIZE)
        						.addContainerGap())
        					.addGroup(layout.createSequentialGroup()
        						.addGap(0, 0, Short.MAX_VALUE)
        						.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        							.addGroup(layout.createSequentialGroup()
        								.addComponent(jtextfiel_message)
        								.addContainerGap())
        							.addGroup(layout.createSequentialGroup()
        								.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)
        								.addGap(18)
        								.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 298, GroupLayout.PREFERRED_SIZE)
        								.addGap(6)))))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(lable_dsonline, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
        				.addComponent(jlabel_sendTo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addGap(6)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
        			.addGap(18)
        			.addComponent(jtextfiel_message, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
        			.addGap(14)
        			.addComponent(jcombobox_received, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(btn_give, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        			.addGap(18))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcombobox_receivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcombobox_receivedActionPerformed
       if (jcombobox_received.getSelectedIndex() == 0) {
            jlabel_sendTo.setText("Tin sẽ được gửi đến mọi người");
        } else {
            jlabel_sendTo.setText("Tin sẽ được gửi đến "+jcombobox_received.getSelectedItem());
        }
    }//GEN-LAST:event_jcombobox_receivedActionPerformed

    private void btn_giveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_giveActionPerformed
        String messageContent = jtextfiel_message.getText();
        if (messageContent.isEmpty()) {
            return;
        }
        if (jcombobox_received.getSelectedIndex() == 0) {
            try {
                write("send-to-global" + "," + messageContent + "," + this.id);
                jtextarea_list_messages.setText(jtextarea_list_messages.getText() + "Bạn: " + messageContent + "\n");
                jtextarea_list_messages.setCaretPosition(jtextarea_list_messages.getDocument().getLength());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
            }
        } else {
            try {
                String[] parner = ((String) jcombobox_received.getSelectedItem()).split(" ");
                write("send-to-person" + "," + messageContent + "," + this.id + "," + parner[1]);
                jtextarea_list_messages.setText(jtextarea_list_messages.getText() + "Bạn (tới Client " + parner[1] + "):" + messageContent + "\n");
                jtextarea_list_messages.setCaretPosition(jtextarea_list_messages.getDocument().getLength());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
            }
        }

    }//GEN-LAST:event_btn_giveActionPerformed

    private void setUpSocket() {
        thread = new Thread() {
            @Override
            public void run() {
                try {
                    skOfClient = new Socket("localhost", 3333);
                    System.out.println("successful connection :3");
                    // Tạo luồng đầu ra tại client (Gửi dữ liệu tới server)
                    output = new BufferedWriter(new OutputStreamWriter(skOfClient.getOutputStream()));
                    // Luồng đầu vào tại Client (Nhận dữ liệu từ server).
                    input = new BufferedReader(new InputStreamReader(skOfClient.getInputStream()));
                    String message;
                    while (true) {
                        message = input.readLine();
                        if (message == null) {
                            break;
                        }
                        String[] messageSplit = message.split(",");
                        if (messageSplit[0].equals("get-id")) {
                            setID(Integer.parseInt(messageSplit[1]));
                            setIDTitle();
                        }
                        if (messageSplit[0].equals("update-online-list")) {
                            onlineList = new ArrayList<>();
                            String online = "";
                            String[] onlineSplit = messageSplit[1].split("-");
                            for (int i = 0; i < onlineSplit.length; i++) {
                                onlineList.add(onlineSplit[i]);
                                online += "Client " + onlineSplit[i] + " đang online\n";
                            }
                            jtextarea_list_useronline.setText(online);
                            updateCombobox();
                        }
                        if (messageSplit[0].equals("global-message")) {
                            jtextarea_list_messages.setText(jtextarea_list_messages.getText() + messageSplit[1] + "\n");
                            jtextarea_list_messages.setCaretPosition(jtextarea_list_messages.getDocument().getLength());
                        }
                    }
                } catch (UnknownHostException e) {
                    return;
                } catch (IOException e) {
                    return;
                }
            }
        };
        thread.run();
    }

    private void updateCombobox() {
        jcombobox_received.removeAllItems();
        jcombobox_received.addItem("every one");
        String idString = "" + this.id;
        for (String e : onlineList) {
            if (!e.equals(idString)) {
                jcombobox_received.addItem("Client " + e);
            }
        }
    }

    private void setIDTitle() {
        this.setTitle("Client " + this.id);
    }

    private void setID(int id) {
        this.id = id;
    }

    private void write(String message) throws IOException {
        output.write(message);
        output.newLine();
        output.flush();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        Client client = new Client();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_give;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jcombobox_received;
    private javax.swing.JLabel jlabel_sendTo;
    private javax.swing.JTextArea jtextarea_list_messages;
    private javax.swing.JTextArea jtextarea_list_useronline;
    private javax.swing.JTextField jtextfiel_message;
    private javax.swing.JLabel lable_dsonline;
}
